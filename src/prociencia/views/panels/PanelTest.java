

package prociencia.views.panels;


/**
 *
 * @author Klac
 */
public class PanelTest extends javax.swing.JPanel {

    private final ThreadScroll hiloScroll = new ThreadScroll();
    private int lastVisited;
    
    public PanelTest() {
        initComponents();
        initComponents(jScrollPane1.getVerticalScrollBar());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setHorizontalScrollBar(null);
        jScrollPane1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jScrollPane1PropertyChange(evt);
            }
        });
        jScrollPane1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jScrollPane1KeyTyped(evt);
            }
        });

        try{
            jScrollPane1.setViewportView(new PanelViewQuestionario(jScrollPane1));
        }catch(Exception ex){

        }
        jScrollPane1.getVerticalScrollBar().setBlockIncrement(300);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jScrollPane1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jScrollPane1KeyTyped
        if(evt.getKeyChar() == java.awt.event.KeyEvent.VK_UP){
            javax.swing.JOptionPane.showMessageDialog(jScrollPane1, (char)evt.getKeyCode());
        }
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_DOWN){
            javax.swing.JOptionPane.showMessageDialog(jScrollPane1, (char)evt.getKeyCode());
        }
    }//GEN-LAST:event_jScrollPane1KeyTyped

    private void jScrollPane1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jScrollPane1PropertyChange
//        if(evt.getPropertyName().equals("desplanzando")){
//            if((Integer)evt.getNewValue() > lastVisited){
//                hiloScroll.setRangeChanged((Integer)evt.getOldValue(), (Integer)evt.getOldValue() + 132);
//            }else{
//                hiloScroll.setRangeChanged((Integer)evt.getOldValue(), (Integer)evt.getOldValue()-132);
//            }
//            lastVisited =(Integer)evt.getNewValue();
//        }
    }//GEN-LAST:event_jScrollPane1PropertyChange

    private void initComponents(javax.swing.JScrollBar barra){
        barra.setBlockIncrement(1);
        hiloScroll.start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
    // End of variables declaration//GEN-END:variables
    private class ThreadScroll extends Thread{
        
        private Integer oldValue,newValue;
        
        void setRangeChanged(Integer oldValue, Integer newValue){
            this.oldValue = oldValue;
            this.newValue = newValue;
            despertar();
        }
        
        @Override
        public void run(){
            while(true){
                if(oldValue != null && newValue != null){
                    desplarar();
                }
                parar();
            }
        }
        
        private void desplarar(){
            if(newValue > oldValue){
                for(int i = oldValue; i <= newValue; i++){
                    jScrollPane1.getVerticalScrollBar().setValue(i);
                    dormir();
                }
            }else{
                for(int i = oldValue ; i >= newValue ; i--){
                    jScrollPane1.getVerticalScrollBar().setValue(i);
                    dormir();
                }
            }
        }
        
        void dormir(){
            try{
                 Thread.sleep(10);
            }catch(InterruptedException ex){ex.printStackTrace();}
        }
        
        synchronized void despertar(){
            this.notify();
        }
        
        synchronized void parar(){
            try{this.wait();}catch(InterruptedException ex){ex.printStackTrace();}
        }
    }

}
